# -*- coding: utf-8 -*-
"""CrimePredict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OAkbWyz2iLIcAGV89cGAwZJ5BVxfwfbn

# **CRIME PREDICTION USING ML**

# IMPORTING LIBRARIES
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from matplotlib.colors import ListedColormap
from sklearn.metrics import confusion_matrix
import seaborn as sns

# %matplotlib inline
df=pd.read_csv('crime.csv')
df

dataset = pd.DataFrame(df)
dataset = dataset.drop(['YEAR','MONTH','DAY','HOUR','MINUTE','HUNDRED_BLOCK','NEIGHBOURHOOD','X','Y','Latitude'], axis=1	)
dataset

"""# A DEMO VIEW OF 30 ROWS"""

df.head(30)

"""# DEMO DATA"""

demo_view = df.iloc[1]
demo_view

"""# REDUCING SIZE OF DATASET

**INDEPENDENT VARIABLE**
"""

x=df.head(2000)
x

"""# LATITUDE"""

a = x.iloc[:,10:11].values
a

"""# LONGITUDE"""

b = x.iloc[:,11].values
b

"""# TAKING AVERAGE OF LATITUDE AND LONGITUDE

**DATA VISUALIZATION**

**MANY NULL VALUES WERE FOUND**
"""

X=[]
for i in range(0,2000):
  ab = a[i]+b[i]
  X.append(ab/2)

X

"""# DATA CLEANING

**THE AVERAGE OF THE OTHER VALUES WERE TAKEN AND THE NULL VALUES WERE SUBSTITUTED**
"""

avg=0
vals=0

for i in X:
  if i<0:
    vals+=1
    avg+=i

avg = avg/vals

avg

"""# DATA CLEANSED"""

for i in range(0,2000):
  if X[i]>=0:
    X[i]=avg


X

"""# DEPENDENT VARIABLE

**REDUCING SIZE TO 2K**
"""

y=df.head(2000)
y

"""**INDEPENDENT VARIABLE TAKEN**"""

y = y.iloc[:,0:1].values
y

"""# FINDING DIFFERENT TYPES OF CRIME"""

YY = [] 
ynum=0
for i in y: 
    if i not in YY: 
        ynum+=1
        YY.append(i)

YY

"""**THERE ARE 7 DIFFERENT TYPES OF CRIMES IN THE DATASET**"""

ynum

"""# REPLACING EACH CRIME WITH A NUMBER FOR EASY COMPUTATION"""

Y=y

for i in range(0,2000):
  if Y[i]=='Other Theft':
    Y[i]=1
  elif Y[i]=='Break and Enter Residential/Other':
    Y[i]=2
  elif Y[i]=='Mischief':
    Y[i]=3
  elif Y[i]=='Break and Enter Commercial':
    Y[i]=4
  elif Y[i]=='Offence Against a Person':
    Y[i]=5
  elif Y[i]=='Theft from Vehicle':
    Y[i]=6
  else:
    Y[i]=7

Y

"""# FINDING THE NUMBER OF EACH TYPE OF CRIME"""

theft=0
breakin=0
mischief=0
commercial=0
offence=0
vehicle=0
collision=0

for i in Y:
  if i == 1:
    theft+=1
  elif i == 2:
    breakin+=1
  elif i == 3:
    mischief+=1
  elif i == 4:
    commercial+=1
  elif i == 5:
    offence+=1
  elif i == 6:
    vehicle+=1
  elif i == 7:
    collision+=1


print("Number of thefts= ", theft)
print("Number of = reak and Enter Residential/Other = ", breakin)
print("Number of mischief = ", mischief)
print("Number of Break and Enter Commercial= ", commercial)
print("Number of Offence Against a Person = ", offence)
print("Number of Theft from Vehicle = ", vehicle)
print("Number of Vehicle Collision or Pedestrian Struck (with Injury) = ", collision)

Y=Y.astype('int')

dataset = dataset.head(2000)
dataset['CRIME'] = Y
dataset['PLACE'] = X
dataset.drop(['TYPE','Longitude'], axis = 1)

"""# VIEWING THE CRIME PLOT GRAPH"""

labels = ['Theft', 'Residential','Mischief','Commercial','Person','Theft Vehicle', 'Vehicle Collide']
number = [theft,breakin,mischief,commercial,offence,vehicle,collision]

fig, ax = plt.subplots()

width = 0.4

ax.bar(labels, number,width, color='Orange')

ax.set_ylabel('NUMBER', color= 'aqua')
ax.set_title('CRIME NUMBER GRAPH', color='yellow')

plt.show()

"""# USING KNN"""

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.30)

knn = KNeighborsClassifier(n_neighbors=5)

knn.fit(X_train,y_train)

pred = knn.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix
from sklearn.model_selection import cross_val_score

print(confusion_matrix(y_test,pred))

print(classification_report(y_test,pred))

accuracy_rate = []

# Will take some time
for i in range(1,40):
    
    knn = KNeighborsClassifier(n_neighbors=i)
    score=cross_val_score(knn,X,Y,cv=10)
    accuracy_rate.append(score.mean())

error_rate = []

# Will take some time
for i in range(1,40):
    
    knn = KNeighborsClassifier(n_neighbors=i)
    score=cross_val_score(knn,X,Y,cv=10)
    error_rate.append(1-score.mean())

plt.figure(figsize=(10,6))
#plt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',
  #       markerfacecolor='red', markersize=10)
plt.plot(range(1,40),accuracy_rate,color='blue', linestyle='dashed', marker='o',
         markerfacecolor='red', markersize=10)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')

# NOW WITH K=15
knn = KNeighborsClassifier(n_neighbors=15)

knn.fit(X_train,y_train)
pred = knn.predict(X_test)

print('WITH K=15')
print('\n')
print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred))

"""# CRIME PREDICTING

**THE DATASET IS CONCENTRATED IN ONE PLACE ONLY DUE TO WHICH THE LATITUDE_LONGITUDE RANGE CAN VARY ONLY FROM -30 to -40**
"""

print("Give the desired Longitude")
longi = float(input())
print("Give the desired Latitude")
latit = float(input())
longlang = (longi+latit)/2
inp = np.array([longlang]) 
inp = inp.reshape(1, -1)

prediction = knn.predict(inp)

if (prediction == 1):
  print("Crime is Theft")
elif (prediction == 3):
  print("Crime is mischief")
elif (prediction == 2):
  print("Crime is Break and Enter Residential")
elif (prediction == 4):
  print("Crime is Break and Enter commercial")
elif (prediction == 5):
  print("Crime is Offence against a person")
elif (prediction == 1):
  print("Crime is Theft from vehicle")
else:
  print("Crime is Vehicle Collision or pedestrian struck/injured")

"""# **THE OUTPUT USUALLY WOULD GIVE ONLY Vehicle Collision or pedestrian struck/injured BECAUSE OF THE DENSITY OF THE DATASET IN A PARTICULAR PLACE. A BETTER DATASET WOULD GIVE BETTER RESULTS**"""